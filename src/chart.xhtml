<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml; charset=utf-8" />
		<script type="text/javascript" src="core/object.js"></script>
		<script type="text/javascript" src="core/array.js"></script>
		<script type="text/javascript" src="core/function.js"></script>
		<script type="text/javascript" src="core/fun.js"></script>
		<script type="text/javascript" src="core/property.js"></script>
		<script type="text/javascript" src="core/math.js"></script>
		<script type="text/javascript" src="jlayout/jlayout.js"></script>
		<script type="text/javascript" src="chart/properties.js"></script>
		<script type="text/javascript" src="chart/interval.js"></script>
		<script type="text/javascript" src="chart/coordinate.js"></script>
		<script type="text/javascript" src="chart/axis.js"></script>
		<script type="text/javascript" src="chart/graphics.js"></script>
		<script type="text/javascript" src="chart/chart.js"></script>
		<script type="text/javascript" src="chart/composite-chart.js"></script>
		<script type="text/javascript" src="chart/canvas.js"></script>

		<script type="text/javascript">
		<![CDATA[
/*
			var data = [];
			var length = 100;
			for (var i = 0; i < length; i += 1) {
				if (i % 523 === 0 || i % 245 === 0) {
					data[i] = Math.randomInt(0,5);
				}  
				else {
					data[i] = Math.randomInt(0,1);
				}
			}

			

			var ctx = null;

			function draw() {

				var canvas = document.getElementById('canvas-context');

				if (canvas.getContext) {
					ctx = canvas.getContext('2d');

					ctx.lineWidth = 1;					
					ctx.save();

					ctx.scale(1000/length, 15);
					for (var i = 0; i < length; i += 1) {
						ctx.lineTo(i, data[i]);
					}
					ctx.restore();
					ctx.stroke();
				}
			}
*/
/*
			var xrange = {from: -10, to: 10};
			var yrange = {from: 0, to: 20};
			var scalex, scaley;
			var pixelSizeX = 0;
			var pixelSizeY = 0;

			function memo(f) {  
				return function () {  
					var args = [arguments[0].from, arguments[0].to];  
					f.memo = f.memo || {};  
					if (args in f.memo) {
						return f.memo[args];
					}
					else {
						return f.memo[args] = f.apply(this, arguments);
						
					}
					//return (args in f.memo)? f.memo[args] : f.memo[args] = f.apply(this, args);  
				};  
			}  

			var mcos = memo(Interval.cos);

			function f(x, y) {
			//	return Interval.sin(x.divide(32)).multiply(50).add(y).add(-100);
				var s = Interval.sin({from: x.from / 32, to: x.to / 32});
				s.from *= 50;
				s.to *= 50;
			
				s = Interval.add(s, y);
				
				s.from -= 100;
				s.to -= 100;

				return s;
				
			//	return x.multiply(x).add(y).add(-100);
			}

			// to translate back we add -x.from to both coordinates

			// to scale we multiply with a scaling factor and (1 / scaling factor) to scale back
			// the scaling factor is the destiny vector divided by the original vector
			// to go from 1 to 100, you need a 100 / 1 = 100 scaling factor.


			function fillRect(x, y, w, h, data, r, g, b) {
				if (x.from >= 0 && x.to <= w && y.from >= 0 && y.to <= h) {
					var yf = Math.round(y.from);
					var yt = Math.round(y.to);
					var xf = Math.round(x.from);
					var xt = Math.round(x.to);

					for (var i = yf; i < yt; i += 1) {
						for (var j = xf; j < xt; j += 1) {
							var p = (i * w + j) * 4;
							data[p] = r;
							data[p + 1] = g;
							data[p + 2] = b;
							data[p + 3] = 255;
						}
					}
				}
			}

			function plotPixel(x, y, w, h, data, r, g, b) {
				var i = (y * w + x) * 4;
				data[i] = r;
				data[i+1] = g;
				data[i+2] = b;
				data[i+3] = 255;
			}

			function quadtree(data, x, y, w, h) {
				var F = f(x, y);

				if (F.from <= 0 && 0 <= F.to) {
					if (Interval.width(x) < 1 && Interval.width(y) < 1) {
						var cx = Math.floor((x.from + x.to) / 2);
						var cy = Math.floor((y.from + y.to) / 2);
					
					//	fillRect(x, y, w, h, data, 0, 0, 255);
						plotPixel(cx, cy, w, h, data, 255, 0, 0);
					}
					else {
						subdivide(data, x, y, w, h);
					}
				}
				else {
				//	fillRect(x, y, w, h, data, 0, 255, 0);
				}
			}

		

			function subdivide(data, x, y, w, h) {
				var xk = (x.from + x.to) / 2;
				var yk = (y.from + y.to) / 2;

				quadtree(data, {from: x.from, to: xk}, {from: y.from, to: yk}, w, h);
				quadtree(data, {from: x.from, to: xk}, {from: yk, to: y.to}, w, h);
				quadtree(data, {from: xk, to: x.to}, {from: yk, to: y.to}, w, h);
				quadtree(data, {from: xk, to: x.to}, {from: y.from, to: yk}, w, h);
			}

			function draw() {

				var canvas = document.getElementById('canvas-context');

				if (canvas.getContext)
				{
					ctx = canvas.getContext('2d');

				//	ctx.fillStyle = "rgb(0, 0, 255)";
				//	ctx.fillRect(0,0, canvas.width, canvas.height);

					var image = ctx.getImageData(0, 0, canvas.width, canvas.height);

					var w = image.width, 
						h = image.height,
						data = image.data;


					quadtree(data, {from: 0, to: w}, {from: 0, to: h}, w, h);

					ctx.putImageData(image, 0, 0);
				}
			}
*/
/*
			var xrange = {from: -100, to: 100};
			var yrange = {from: -10, to: 10};
*/
			function draw() {
/*
				var canvas = document.getElementById('canvas-context');
		
				if(canvas.getContext) {
					ctx = canvas.getContext('2d');

					ctx.scale(1, -1);
					ctx.translate(0, -canvas.height);
					ctx.strokeStyle = 'rgb(0,0,0)';
					

					ctx.save();
					ctx.scale(canvas.width / Interval.width(xrange), canvas.height / Interval.width(yrange));
					ctx.translate(-xrange.from, -yrange.from);
					ctx.lineWidth = 1 / 200;

					
					ctx.beginPath();
					ctx.moveTo(xrange.from, 0);
					ctx.lineTo(xrange.to, 0);
					ctx.closePath();
					ctx.stroke();				

					ctx.lineWidth = 1 / 20;
					ctx.beginPath();
					ctx.moveTo(0, yrange.from);
					ctx.lineTo(0, yrange.to);
					ctx.closePath();
					ctx.stroke();
					
					ctx.lineWidth = 1 / 20;
					ctx.beginPath();
					ctx.moveTo(0, 0);
					ctx.lineTo(100, 10);
					ctx.closePath();
					ctx.stroke();
					

					ctx.restore();

					

					var horizontalAxis = axis({from: xrange.from, to: xrange.to, numMajorTicks: 10, numMinorTicks: 6});
					var verticalAxis = axis({from: yrange.from, to: yrange.to, numMajorTicks: 10});
				}


var c = canvas(g, {
    horizontalAxis: axis({
        from: 0,
        to: 10,
        numMajorTicks: 10
    }),
    verticalAxis: axis({
        from: 0,
        to: 10,
        numMajorTicks: 10
    })
});

*/
			}
		]]>
		</script>
		<style>
			body {
				font-size: 10em;
			}

			#canvas-context {
				border: 1px solid black;
			}


		</style>
	</head>
	<body onload="draw();">
		<canvas id="canvas-context" width="400" height="400"></canvas>
	</body>
</html>

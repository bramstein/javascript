<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml; charset=utf-8" />
		<script type="text/javascript" src="core/object.js"></script>
		<script type="text/javascript" src="core/array.js"></script>
		<script type="text/javascript" src="core/function.js"></script>
		<script type="text/javascript" src="core/fun.js"></script>
		<script type="text/javascript" src="core/math.js"></script>
		<script type="text/javascript" src="chart/chart.js"></script>
		<script type="text/javascript">
		<![CDATA[
			var ctx = null;

			var m = Math.Interval(10,10);

			function f(x, y) {
				return x.subset(y);
			}

			function quadtree(data, x, y, w, h, depth) {
				if (f(x, y)) {
					if (x.length() <= 1 && y.length() <= 1) {
						var rx = Math.round((x.from + x.to) / 2);
						var ry = Math.round((y.from + y.to) / 2);	
						var i = (ry * w + rx) * 4;
						data[i] = 255;
						data[i + 1] = 0;
						data[i + 2] = 0;
						data[i + 3] = 255;
					}
					else {
						subdivide(data, x, y, w, h, depth);
					}
				}
			}

			function subdivide(data, x, y, w, h, depth) {
				var xk = (x.from + x.to) / 2;
				var yk = (y.from + y.to) / 2;

				quadtree(data, new Math.Interval(x.from, xk), new Math.Interval(y.from, yk), w, h, depth);
				quadtree(data, new Math.Interval(x.from, xk), new Math.Interval(yk, y.to), w, h, depth);
				quadtree(data, new Math.Interval(xk, x.to), new Math.Interval(yk, y.to), w, h, depth);
				quadtree(data, new Math.Interval(xk, x.to), new Math.Interval(y.from, yk), w, h, depth);
			}

			function draw() {

				var canvas = document.getElementById('canvas-context');

				if (canvas.getContext)
				{
					ctx = canvas.getContext('2d');

					var image = ctx.getImageData(0, 0, canvas.width, canvas.height);

					var w = image.width, 
						h = image.height,
						data = image.data;

					quadtree(data, Math.Interval(0, canvas.width), Math.Interval(0, canvas.height), w, h, 0);

					ctx.putImageData(image, 0, 0);
				}


			}
		]]>
		</script>
		<style>
			#canvas-context {
				border: 1px solid black;
			}
		</style>
	</head>
	<body onload="draw();">
		<canvas id="canvas-context" width="200" height="200"></canvas>
	</body>
</html>

The graphics module is an abstract layer


API
--------
*Chaining
*layer on top of HTML Canvas
*path, shapes

Shape includes the following methods:
* beginViewport
* closeViewport
* beginPath
* stroke
* fill
* beginClip
* closeClip
* rect
* line
* points: circle, triangle, cross, diamond, vdash, hdash, ellipse, square
* text

Path includes the following methods:
lineTo
moveTo
arcTo
bezierCurveTo
quadraticCurveTo
closePath
endPath



Crisp line drawing
------------------
Although it has support for some vector operations, the HTML5 Canvas element is not a vector based API, it basically draws bitmaps. As such, it becomes a necessity to manually ensure that lines are drawn on screen pixels instead of on pixel boundaries resulting in an approximation (blurred lines.)[3] (TODO: clarify this with a picture) The graphics module internally ensures that all lines and rectangles are drawn on screen pixels and never on the boundaries. As this "rounding" to screen pixels is done consistently, the resulting image is not affected, other than being slightly moved up or down (depending on the implementation of the rounding.)

Custom view-ports
-----------------



Fonts/Text support
------------------
Unfortunately font and text drawing support in the HTML5 Canvas element is not well developed at the moment. Only Firefox 3.1 and Safari implement a standardized text drawing API. Firefox also offers its own alternative text drawing API. Both Internet Explorer and Opera have no support for drawing text on a HTML5 Canvas (Internet Explorer does in fact not support the Canvas element at all.) The standardized text API is also severely lacking in functionality. For example, it is possible to retrieve the width of a string in pixels, but not the height. Text is not treated as a set of paths, but drawn directly on the canvas through two separate fillText and strokeText functions. Strangely enough, the alternative Firefox text API does offer support for treating text as paths, and offers the ability to then stroke or fill those paths. Direct drawing versus paths is a not a big issue in the development of this chart library, but the font metrics problems are a big issue when aligning labels, legends, and titles.

In order to overcome these problems the chart library uses the HTML DOM to insert the a properly stylized string into an offscreen location in the surrounding HTML page and retrieve correct font metrics that way. In future versions of the library it might be possible to replace this with a better standardized and implemented HTML5 Canvas text API. Alternatively, it would be possible to overlay absolutely positioned HTML elements on top of the HTML canvas [4], use a bitmap font [5], or one of the available path based fonts [6].

Browser support
---------------
Firefox, Opera and Safari all support various subsets of the HTML5 Canvas tag. Fortunately, and apart from a text API, there is a common subset of functionality that is sufficient for use in the chart library. Unfortunately, the only browser that does not support HTML5 Canvas is also the browser with the largest market share: Internet Explorer. Fortunately there are JavaScript implementations available that provide a HTML5 Canvas API for Internet Explorer and convert the API calls into VML elements [7]. By using one of these JavaScript implementations, the chart library supports all major browsers.


[3] "Applying styles and colors", Eric Shepherd, Mozilla Developer Center, URL <https://developer.mozilla.org/en/Canvas_tutorial/Applying_styles_and_colors#Line_styles>, Visited: 2009-02-15

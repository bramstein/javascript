<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml; charset=utf-8" />
		<script type="text/javascript" src="../lib/jquery-1.2.6.js"></script>
		<script type="text/javascript" src="table/jquery.column-selector.js"></script>
		<script type="text/javascript">
		<![CDATA[ 

			jQuery(function($)
			{

				var cells = $('table th').width(50).height(25).css({textAlign: 'left'});
				cells.each(function (i) {
					$(this).text(this.cellIndex);
				});
/*
				var t2cells = $('#t2 th').width(50).height(25).css({textAlign: 'left'});

				t2cells.each(function (i) {
					$(this).text(this.cellIndex);
				});

				var t3cells = $('#t3 th').width(50).height(25).css({textAlign: 'left'});
				t3cells.each(function (i) {
					$(this).text(this.cellIndex);
				});

				var rows = $('#t1 tr');

				var	matrix = [];

				rows.each(function (rowIndex) {

					if (matrix[rowIndex] === undefined) { 
						matrix[rowIndex] = [];
					}				

					$.each(this.cells, function(j) {
						var rowSpan = this.rowSpan || 1,
							colSpan = this.colSpan || 1;
	
						for (k = 0; k < matrix[rowIndex].length + 1; k += 1) {
							if (matrix[rowIndex][k] === undefined) {
								firstAvailCol = k;
								break;
							}
						}

						$(this).text($(this).text() + ' ' + firstAvailCol);

						for (k = rowIndex; k < rowIndex + rowSpan; k += 1) {
							if (matrix[k] === undefined) { 
								matrix[k] = [];
							}
							for (l = firstAvailCol; l < firstAvailCol + colSpan; l += 1) {
								matrix[k][l] = true;
							}
						}				

					});
				});
*/
				function getColumn(table, index) {
					var result = [], rows = $(table).find('tr'), r = 0, i = 0, cellIndex = 0,
						cache = [], colSpan, rowSpan;

					for (r = 0; r < rows.length; r += 1, cellIndex = 0) {

						$.each(cache, function() {
							cellIndex += this > 0 ? 1 : 0;
						});

						for (i = 0; i < rows[r].cells.length; i += 1) {
							rowSpan = rows[r].cells[i].rowSpan;
							colSpan = rows[r].cells[i].colSpan;
		
							if (rowSpan > 1 && cellIndex <= index - 1) {
								cache[cellIndex] = rowSpan;

								// if the cell also has a colspan attribute we need to add 
								// extra rowspans to the cache to account for that.
								if (colSpan > 1) {
									for (var j = cellIndex; j < cellIndex + colSpan; j += 1) {
										cache[j] = rowSpan;
									}
								}
							}

							if (cellIndex === index - 1) {
								result.push(rows[r].cells[i]);
							//	this.pushStack(rows[r].cells[i]);

								// if the selected cell has a rowspan of more than one, we can skip
								// the next n rows, where n is the number of rows the cell spans.
								if (rowSpan > 1) {
									// also update the cache and reduce all the values with the row span
									cache = $.map(cache, function(v) {
										return v > rowSpan ? v - (rowSpan - 1) : 0;
									});

									r += rowSpan - 1;
								}

								// we found a match in this row so we skip to the next row
								break;
							}

							// update the cellIndex with column span of the cell or 1 if it is not set
							cellIndex += colSpan || 1;					
						}

						cache = $.map(cache, function(v) {
							return v > 0 ? v - 1 : 0;	
						});
					}
					return result;
				}

				jQuery.fn.getCol = function (index) {
					//var result = getColumn($(this.get()), index);
					var result = [];
					//console.log(this.get());
					return this.pushStack(this.get(), []);
				};

				jQuery.expr[':']['nth-col'] = function (a, i, m, q) {
					console.log("a: " + a);
					console.log("i: " + i);
					console.log("m: " + m);
					console.log("q: " + q);
					return true;
				}; 

				jQuery._filter = jQuery.filter;

				jQuery.filter = function (t, r, not) {
					var	m = jQuery.parse[1].exec(t);

					if (m && m[1] === ':' && m[2] === 'nth-col') {

						t = t.substring(m[0].length);
	
					//	console.log(m);
					//	console.log(t);
					//	console.log(r);
						console.log(t);
						//r = [];

						return { r: r, t: t };
					}
					return jQuery._filter(t, r, not);				
				};

			//	jQuery.expr[':']['nth-col'] = "console.log(a) && console.log(i) && console.log(m) && true";
/*
				$('#t2').getCol(2).css({backgroundColor: 'blue'});

					jQuery.extend({ 
						expr: { 
							':': {
								'nth-column': function (a, q, m) {
									var result = [], rows = $(a).find('tr'), r = 0, i = 0, cellIndex = 0,
									cache = [], colSpan, rowSpan, index = m[3], cell;

									for (r = 0; r < rows.length; r += 1, cellIndex = 0) {

										$.each(cache, function() {
											cellIndex += this > 0 ? 1 : 0;
										});


										for (i = 0; i < rows[r].cells.length; i += 1) {
											cell = rows[r].cells[i];
											rowSpan = cell.rowSpan;
											colSpan = cell.colSpan;
						
											if (rowSpan > 1 && cellIndex <= index - 1) {
												cache[cellIndex] = rowSpan;

												// if the cell also has a colspan attribute we need to add 
												// extra rowspans to the cache to account for that.
												if (colSpan > 1) {
													for (var j = cellIndex; j < cellIndex + colSpan; j += 1) {
														cache[j] = rowSpan;
													}
												}
											}

											if (cellIndex === index - 1) {
												result.push(cell);

												// if the selected cell has a rowspan of more than one, we can skip
												// the next n rows, where n is the number of rows the cell spans.
												if (rowSpan > 1) {
													// also update the cache and reduce all the values with the row span
													cache = $.map(cache, function(v) {
														return v > rowSpan ? v - (rowSpan - 1) : 0;
													});

													r += rowSpan - 1;
												}

												// we found a match in this row so we skip to the next row
												break;
											}

											// update the cellIndex with column span of the cell or 1 if it is not set
											cellIndex += colSpan || 1;					
										}

										cache = $.map(cache, function(v) {
											return v > 0 ? v - 1 : 0;	
										});
									}
									return result;
								}
							}
						}
					});

*/
				// $('#t1 thead th:nth-colgroup(2)').css({backgroundColor: 'yellow'});
				// $('#t1 tbody td:nth-col(4)').css({backgroundColor: 'red'});
				

	//			$('#t1:nth-column(2)').css({backgroundColor: 'yellow'});
/*
				$.each(getColumn($('#t1 thead'), 3), function(i) {
					$(this).css({backgroundColor: 'yellow'});
				});


				$.each(getColumn($('#t2'), 3), function(i) {
					$(this).css({backgroundColor: 'yellow'});
				});

				$.each(getColumn($('#t3'), 4), function (i) {
					$(this).css({backgroundColor: 'yellow'});
				});

				$.each(getColumn($('#t4'), 1), function (i) {
					$(this).css({backgroundColor: 'yellow'});
				});
*/

				function h() {
					alert('yes!');
				}

				$('#t').append('hello');
			});
		]]>
		</script>
<!--
No colgroup means there is an implicit single colgroup for all columns


* no col or colgroup
	- calculate colindex
	- select matching colindex
	- return all cells in the colindex

* col or colgroup


algorithm:
- let n be the number of colspans in the first row of the table. The default colspan is 1. Each cell has a colspan. The cell index of a cell determines the position of the cell in the source tree.
- let r be the number of rows in the table

for every row in the table
	
-->
	</head>
	<body>
		<div id="t" onchange="h();">text</div>
		<table border="1" id="t1">
			<colgroup>
				<col/>
				<col/>
				<col/>
				<col/>
				<col style="background-color: red;"/> 
			</colgroup>
			<thead>
				<tr>
					<th rowspan="2">&nbsp;</th>

					<th>&nbsp;</th>
					<th colspan="2">&nbsp;</th>
			<!--		<th>&nbsp;</th>-->
					<th>&nbsp;</th>
				</tr>
				<tr>
					<th colspan="2">&nbsp;</th>
					<th rowspan="3">&nbsp;</th>
					<th>&nbsp;</th>

				</tr>
				<tr>
					<th colspan="2">&nbsp;</th>
					<th>&nbsp;</th>
					<th>&nbsp;</th>
				</tr>
				<tr>
					<th>&nbsp;</th>
					<th>&nbsp;</th>

					<th>&nbsp;</th>
					<th>&nbsp;</th>
				</tr>
				<tr>
					<th>&nbsp;</th>
					<th>&nbsp;</th>
					<th>&nbsp;</th>
					<th>&nbsp;</th>
					<th>&nbsp;</th>
				</tr>
			</thead>
		</table>

		<p></p>

		<table border="1" id="t2">
			<colgroup>
				<col/>
				<col style="background-color: red;"/>
				<col />
				<col />
			</colgroup>
			<thead>
				<tr>
					<th>1</th>
					
					<th colspan="3">2 &amp; 3</th>
					<!--<th>4</th>-->
<!--<th rowspan="2">1.5</th>-->
				</tr>
				<tr>
					<th>1</th>
					<th><b>2</b></th>
					<th>3</th>
					<th>4</th>
				</tr>
				<tr>
					<th colspan="2">
						5
					</th>
					<th colspan="2">
						6
					</th>
				</tr>
			</thead>
		</table>

		<p></p>

		<table border="1" id="t3">
			<thead>
				<tr>
					<th rowspan="4">0</th>
					<th rowspan="3">1</th>
					<th rowspan="2">2</th>
					<th>3</th>
				</tr>
				<tr>
					<th>0</th>
				</tr>
				<tr>
					<th>0</th>
					<th>1</th>
				</tr>
				<tr>
					<th>0</th>
					<th>1</th>
					<th>2</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>1</td>
					<td>2</td>
					<td>3</td>
					<td>4</td>
				</tr>
			</tbody>
		</table>

		<p></p>

		<table id="t4" border="1">
			<colgroup>
				<col/>
				<col style="background-color: red;"/>
				<col/>
			</colgroup>
			<thead>
				<tr>
					<th colspan="2" rowspan="2">1</th>
					<th>2</th>
				</tr>
				<tr>
					<th>3</th>
				</tr>
				<tr>
					<th>4</th>
					<th>5</th>
					<th>6</th>
				</tr>
			</thead>
		</table>

	</body>
</html>
